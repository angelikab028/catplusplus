--start and functions
program_start -> %empty | functions
-- (left factoring) functions -> function | function functions
functions -> function functions'
functions' -> %empty | functions functions'
function -> FUNCTION function_return_type IDENTIFIER LEFT_PARENTHESIS arguments RIGHT_PARENTHESIS LEFT_CURLY statements RIGHT_CURLY 
function_return_type -> INTEGER | VOID

--declaration and assignments
integer_declaration -> INTEGER IDENTIFIER assignment_declaration SEMICOLON
assignment_declaration -> %empty | ASSIGN NUMBER
assignment -> IDENTIFIER ASSIGN NUMBER SEMICOLON

-- math expressions
-- (left recursion) math_expression -> math_expression addop term | term
math_expression -> term math_expression'
math_expression' -> addop term math_expression' | %empty
addop -> ADD | SUB
-- (left recursion) term -> term mulop factor | factor
term -> factor term'
term' -> mulop factor term' | %empty
mulop -> MULT | DIV 
factor -> RIGHT_PARENTHESIS math_expression LEFT_PARENTHESIS | NUMBER 

--conditional expressions
-- (left recursion) cond_expression -> cond_expression condop condterm | condterm
cond_expression -> condterm cond_expression'
cond_expression' -> condop condterm cond_expression' | %empty
condop -> EQUALS | LESSTHAN | GREATERTHAN | LESSOREQUALS | GREATOREQUALS
condterm -> condfactor 
condfactor -> RIGHT_PARENTHESIS cond_expression LEFT_PARENTHESIS | NUMBER

expression -> cond_exp
cond_exp -> add_exp | cond_exp LESSTHAN add_exp | cond_exp GREATERTHAN add_exp | cond_exp GREATOREQUALS add_exp | cond_exp LESSOREQUALS add_exp
add_exp -> mult_exp | add_exp ADD mult_exp | add_exp SUB mult_exp
mult_exp -> unary_exp | mult_exp MULT unary_exp | mult_exp DIV unary_exp | mult_exp MOD unary_exp
unary_exp -> primary_exp
primary_exp -> NUMBER | LEFT_PARENTHESIS expression RIGHT_PARENTHESIS | IDENTIFIER | IDENTIFIER LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET

statements -> statement statements'
statements' -> %empty | statement statements'
statement -> exp_st | declare_st | break_st | continue_st | return_st | loop_st | if_st | else_st | statement_block | read_st | print_st
exp_st -> expression SEMICOLON
declare_st -> IDENTIFIER SEMICOLON
statement_block -> LEFT_CURLY statements RIGHT_CURLY
if_st -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement_block
else_st -> ELSE statement_block | ELSE if_st
loop_st -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement_block
break_st -> BREAK SEMICOLON
continue_st -> CONTINUE SEMICOLON 
return_st -> RETURN return_exp SEMICOLON
return_exp -> expression | %empty
read_st -> READ LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
print_st -> PRINT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON